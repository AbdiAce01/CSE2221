import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Abdifatah Ashirow
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = null;
        if (getChildElement(channel, "title") >= 0) {
            if (channel.child(getChildElement(channel, "title"))
                    .numberOfChildren() < 1) {
                title = "No information";
            } else {
                title = channel.child(getChildElement(channel, "title"))
                        .child(0).label();
            }
        } else {
            title = "No information";
        }
        String description;
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() < 1) {
            description = "No Description.";
        } else {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }

        /* Print out html opening tags */
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(
                "<h1><a href=\""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree ace = new XMLTree1(url);
        SimpleWriter fileOut = new SimpleWriter1L(file);

        outputHeader(ace.child(0), fileOut);
        XMLTree channel = ace.child(0);
        int i = 0;
        /* Print all children of xml tag with tag "item" then prints all */
        while (channel.numberOfChildren() > i) {
            /* Find first "item" tag occurrence */
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), fileOut);
            }
            i++;
        }
        outputFooter(fileOut);

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int i = 0;
        while (i < xml.numberOfChildren() && index < 0) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index; /* Returns index where "tag" was found starting at 0. */
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>"); /* Start table */
        int k = 0;
        int t = -1;
        String date = "";
        String source = "No Source Available.";
        String sourceURL = "";
        String news = "No Descripton.";

        /*
         * Assign a value to String date if their is a pubdate listed. Then
         * print information in row
         */
        if (item.numberOfChildren() < 1) {
            out.println("No Item available.");
        } else {
            if (item.child(getChildElement(item, "pubDate"))
                    .numberOfChildren() < 1) {
                date = "No Date Available";
            } else {
                date = item.child(getChildElement(item, "pubDate")).child(0)
                        .label();
            }
            out.println("<th>" + date + "</th>");

            /*
             * Assign a value to String source if their is a source listed. Then
             * print information in row
             */
            while (item.numberOfChildren() > k) {
                if (item.child(k).label().equals("source")) {
                    t = 0;
                }
                k++;
            }
            if (t == 0) {
                source = item.child(getChildElement(item, "source")).child(0)
                        .label();
                sourceURL = item.child(getChildElement(item, "source"))
                        .attributeValue("url");
                out.println("<th><a href=\"" + sourceURL + "\">" + source
                        + "</th>");
            } else {
                out.println("<th>" + source + "</th>");
            }

            /*
             * Assign a value to String news if their is a description listed.
             * Then print information in row
             */

            String link = "";
            if (getChildElement(item, "link") > 0) {
                link = item.child(getChildElement(item, "link")).child(0)
                        .label();
            }

            if (item.child(getChildElement(item, "title"))
                    .numberOfChildren() < 1) {
                if (item.child(getChildElement(item, "description"))
                        .numberOfChildren() < 1) {
                    news = "No Descripton.";
                } else {
                    news = item.child(getChildElement(item, "description"))
                            .child(0).label();
                }
            } else {
                news = item.child(getChildElement(item, "title")).child(0)
                        .label();
            }
            out.println("<th><a href=\"" + link + "\">" + news + "</th>");

            out.println("</tr>"); /* Closes table */
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /* Enter a rss url verison 2.0 */
        out.print("Enter the URL of an RSS 2.0 news index feed page: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        /* Enter name of output file */
        out.println("Please name the output file ending in .html");
        String outputfile = in.nextLine();

        SimpleWriter fileOut = new SimpleWriter1L(outputfile);

        String title = xml.attributeValue("title");
        /* Print opening tags for index page */
        fileOut.println("<html>");
        fileOut.println("<head>");
        fileOut.println("<title>" + title + "</title>");
        fileOut.println("</head>");
        fileOut.println("<body>");
        fileOut.println("<h2>" + title + "</h2>");
        fileOut.println("<ul>");

        for (int i = 0; xml.numberOfChildren() > i; i++) {

            processFeed(xml.child(i).attributeValue("url"),
                    xml.child(i).attributeValue("file"), out);
            fileOut.println("<li><a href=\""
                    + xml.child(i).attributeValue("file") + "\">"
                    + xml.child(i).attributeValue("name") + "</a></li>");

        }
        fileOut.println("</ul>");
        fileOut.println("</body>");
        fileOut.println("</html>");
        /* Closing tag for index page */
        in.close();
        out.close();
        fileOut.close();
    }

}